// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MANAGER
  ATTENDANT
}

enum QueueStatus {
  OPEN
  BUSY
  CLOSED
}

enum DocumentType {
  RG
  CPF
}

enum TicketStatus {
  OPEN
  PROCESSING
  CLOSED
}

// model User {
//   id          String   @id @default(uuid())
//   name        String
//   // attendant   Attendant? @relation(fields: [attendantId], references: [id])
//   manager     Manager?
//   attendantId String?
// }

model Client {
  id             String       @id @default(uuid())
  name           String
  phone          String
  documentType   DocumentType
  documentNumber String
  tickets        Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id         String      @id @default(uuid())
  name       String      @unique
  attendants Attendant[] @relation("AttendantServices")
  Ticket     Ticket[]
}

model Attendant {
  id          String      @id @default(uuid())
  // userId      String      @unique
  // user        User        @relation(fields: [userId], references: [id])
  name        String
  email       String      @unique
  password    String
  roles       Role[]
  queueStatus QueueStatus
  queueLimit  Int
  services    Service[]   @relation("AttendantServices")
  Ticket      Ticket[]
}

// model Manager {
//   id       String @id @default(uuid())
//   userId   String @unique
//   user     User   @relation(fields: [userId], references: [id])
//   email    String @unique
//   password String
//   roles    Role[]
// }

model Ticket {
  id          String       @id @default(uuid())
  serviceId   String
  attendantId String
  clientId    String
  status      TicketStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client    Client    @relation(fields: [clientId], references: [id])
  Service   Service   @relation(fields: [serviceId], references: [id])
  Attendant Attendant @relation(fields: [attendantId], references: [id])
}
